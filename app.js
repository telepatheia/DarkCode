// Generated by CoffeeScript 1.9.3
var Agenda, app, bodyParser, collection_agenda, collection_formpage, collection_user, db, ejs, express, mongojs, namedb, port, validasiFormnotif, validasiLogin;

express = require('express');

bodyParser = require('body-parser');

mongojs = require('mongojs');

Agenda = require('agenda');

port = 3010;

namedb = "projek";

collection_user = "user";

collection_formpage = "formpage";

collection_agenda = "agenda";

ejs = require('ais-ejs-mate')({
  open: '{{',
  close: '}}'
});

db = mongojs('127.0.0.1/' + namedb);

app = express();

app.engine('.html', ejs);

app.use(bodyParser());

app.set('views', __dirname);

app.use(express["static"](__dirname + '/public'));

app.set('views', "./views");

app.set('view engine', 'html');

validasiLogin = function(req, res, next) {
  var error;
  if (req.body.email === '') {
    error = {
      status: 'Email must be filled'
    };
    return res.render('login', {
      error: error
    });
  } else if (req.body.password === '') {
    error = {
      status: 'Password must be filled'
    };
    return res.render('login', {
      error: error
    });
  } else {
    return next();
  }
};

validasiFormnotif = function(req, res, next) {
  var error, ref, template_list, tipe_engine, tipe_pengiriman;
  ref = require('./public/mock/list_template.js'), template_list = ref.template_list, tipe_pengiriman = ref.tipe_pengiriman, tipe_engine = ref.tipe_engine;
  if (req.body.namarules === '') {
    error = {
      status: 'Nama rules must be filled'
    };
    return res.render('form-page', {
      error: error,
      dataJson: [{}],
      template_list: template_list,
      tipe_pengiriman: tipe_pengiriman,
      tipe_engine: tipe_engine
    });
  } else if (req.body.query === '') {
    error = {
      status: 'Query must be filled'
    };
    return res.render('form-page', {
      error: error,
      dataJson: [{}],
      template_list: template_list,
      tipe_pengiriman: tipe_pengiriman,
      tipe_engine: tipe_engine
    });
  } else if (req.body.query === '{}') {
    error = {
      status: 'Query must be filled with something'
    };
    return res.render('form-page', {
      error: error,
      dataJson: [{}],
      template_list: template_list,
      tipe_pengiriman: tipe_pengiriman,
      tipe_engine: tipe_engine
    });
  } else if (req.body.tipepengirimancustom === '') {
    error = {
      status: 'Tipe Pengiriman must be filled'
    };
    return res.render('form-page', {
      error: error,
      dataJson: [{}],
      template_list: template_list,
      tipe_pengiriman: tipe_pengiriman,
      tipe_engine: tipe_engine
    });
  } else if (req.body.mailengine === '') {
    error = {
      status: 'Mail Engine must be choosed like Haraka or Mandrill'
    };
    return res.render('form-page', {
      error: error,
      dataJson: [{}],
      template_list: template_list,
      tipe_pengiriman: tipe_pengiriman,
      tipe_engine: tipe_engine
    });
  } else {
    return next();
  }
};

app.get('/login', function(req, res) {
  return res.render('login', {
    error: false
  });
});

app.get('/form-page', function(req, res) {
  var ref, template_list, tipe_engine, tipe_pengiriman;
  ref = require('./public/mock/list_template.js'), template_list = ref.template_list, tipe_pengiriman = ref.tipe_pengiriman, tipe_engine = ref.tipe_engine;
  return res.render('form-page', {
    error: false,
    dataJson: [{}],
    template_list: template_list,
    tipe_pengiriman: tipe_pengiriman,
    tipe_engine: tipe_engine
  });
});

app.post('/form-page', validasiFormnotif, function(req, res, next) {
  var custom_tipe_pengiriman, day, hours, insertObject, minutes, month, ref, template_list, tipe_engine, tipe_pengiriman, weekday;
  ref = require('./public/mock/list_template.js'), template_list = ref.template_list, tipe_pengiriman = ref.tipe_pengiriman, tipe_engine = ref.tipe_engine;
  minutes = req.body.minutes;
  hours = req.body.hours;
  day = req.body.day;
  month = req.body.month;
  weekday = req.body.weekday;
  custom_tipe_pengiriman = req.body.custom_tipe_pengiriman;
  if (!custom_tipe_pengiriman) {
    custom_tipe_pengiriman = "";
  }
  if (req.body.tipe_pengiriman === "Custom") {
    custom_tipe_pengiriman = minutes + ' ' + hours + ' ' + day + ' ' + month + ' ' + weekday;
  }
  insertObject = {
    name: req.body.namarules,
    template: req.body.template,
    query: req.body.query,
    scheduleType: req.body.tipe_pengiriman,
    engine: req.body.mailengine,
    customType: custom_tipe_pengiriman
  };
  return db.collection(collection_formpage).save(insertObject, function(error, result) {
    if (error) {
      return res.send(error);
    }
    error = {
      statusSuccess: 'Successfully'
    };
    res.render('form-page', {
      error: error,
      dataJson: [{}],
      template_list: template_list,
      tipe_pengiriman: tipe_pengiriman,
      tipe_engine: tipe_engine
    });
    return next();
  });
});

app.get('/list-rule', function(req, res) {
  return db.collection(collection_formpage).find({}, function(error, result) {
    var data;
    data = {
      dataJson: result
    };
    return res.render('list-page', data);
  });
});

app.get('/list-rule/:id/edit', function(req, res) {
  var id_rules, ref, template_list, tipe_engine, tipe_pengiriman, tipeaction;
  tipeaction = "Edit";
  id_rules = req.params.id;
  ref = require('./public/mock/list_template.js'), template_list = ref.template_list, tipe_pengiriman = ref.tipe_pengiriman, tipe_engine = ref.tipe_engine;
  if (tipeaction === 'Edit') {
    db.collection(collection_formpage).find({
      _id: mongojs.ObjectId(id_rules)
    }, function(error, result) {
      var idrules;
      idrules = {
        dataJson: result,
        error: false,
        template_list: template_list,
        tipe_pengiriman: tipe_pengiriman,
        tipe_engine: tipe_engine
      };
      return res.render('form-page', idrules);
    });
  }
  if (tipeaction === 'Delete') {
    return db.collection(collection_formpage).remove({
      _id: mongojs.ObjectId(id_rules)
    }, true, function(error, result) {
      return res.redirect('list-rule');
    });
  }
});

app.post('/list-rule/:id/edit', function(req, res) {
  var custom_tipe_pengiriman, day, hours, id_rules, minutes, month, updateObject, weekday;
  id_rules = req.params.id;
  minutes = req.body.minutes;
  hours = req.body.hours;
  day = req.body.day;
  month = req.body.month;
  weekday = req.body.weekday;
  custom_tipe_pengiriman = req.body.custom_tipe_pengiriman;
  if (!custom_tipe_pengiriman) {
    custom_tipe_pengiriman = "";
  }
  if (req.body.tipe_pengiriman === "Custom") {
    custom_tipe_pengiriman = minutes + ' ' + hours + ' ' + day + ' ' + month + ' ' + weekday;
  }
  updateObject = {
    name: req.body.namarules,
    template: req.body.template,
    query: req.body.query,
    scheduleType: req.body.tipe_pengiriman,
    engine: req.body.mailengine,
    customType: custom_tipe_pengiriman
  };
  console.dir(updateObject);
  return db.collection(collection_formpage).update({
    _id: mongojs.ObjectId(id_rules)
  }, {
    $set: updateObject
  }, function(error, result) {
    if (error) {
      return res.send(error);
    }
    return res.redirect('/list-rule');
  });
});

app.post('/auth-login', validasiLogin, function(req, res) {
  var mail, pass;
  mail = req.body.email;
  return pass = req.body.password;
});

app.post('/list-rule', function(req, res) {
  var idrules, tipeaction;
  tipeaction = req.body.tipeaction;
  idrules = req.body.idrules;
  if (tipeaction === 'Edit') {
    db.collection(collection_formpage).find({
      _id: mongojs.ObjectId(idrules)
    }, function(error, result) {
      idrules = {
        dataJson: result,
        error: false
      };
      console.dir(idrules);
      return res.render('form-page', idrules);
    });
  }
  if (tipeaction === 'Delete') {
    return db.collection(collection_formpage).remove({
      _id: mongojs.ObjectId(idrules)
    }, true, function(error, result) {
      return res.redirect('list-rule');
    });
  }
});

app.post('/count', function(req, res) {
  var query;
  query = JSON.parse(req.body.query);
  console.dir(query);
  return db.collection(collection_user).count(query, function(error, result) {
    if (error) {
      return res.send(error);
    }
    return res.json({
      total: result
    });
  });
});

app.listen(port, function() {
  return console.log('listen port ' + port);
});
